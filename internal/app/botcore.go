package app

import (
	"log"
	"os"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	keyBoardGenerator "github.com/zykunov/courseGoFirst/vkApiBot/pkg/keyboardgenerator"
	"github.com/zykunov/courseGoFirst/vkApiBot/storage"
)

var (
	linkWait       bool
	delete         bool
	groupMode      bool
	previusMessage string
)

func BotStart() {
	botToken := os.Getenv("bot_token")
	if botToken == "" {
		log.Fatalf("set token for your bot!")
	}

	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatalf("error while starting bot", err)
	}

	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	var numericKeyboard = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚úÖ–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ùì–ö–∞–∫ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?"),
		),
	)

	for update := range updates {
		if update.Message != nil {
			log.Printf("[%v:%s] %s", update.Message.From.ID, update.Message.From.UserName, update.Message.Text)

			msg := tgbotapi.NewMessage(update.Message.Chat.ID, update.Message.Text)

			if groupMode {
				if update.Message.Text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" {
					msg.ReplyMarkup = numericKeyboard
					groupMode = false
				}
				groupExist := storage.CheckGroupById(update.Message.Text, update.Message.Chat.ID)
				if groupExist {
					msg.ReplyMarkup = NewKeyBoard("üÜï–°–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤—ã—Ö –ª—é–¥–µ–π\n‚ùå–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É")
					msg.Text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –≥—Ä—É–ø–ø–æ–π"
					groupMode = false
					log.Println("disable group mode")
					previusMessage = update.Message.Text
				} else {
					msg.Text = "–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç"
				}
			} else {
				if linkWait {
					if delete {
						msg.DisableWebPagePreview = true
						msg.Text = storage.DeleteGroupById(update.Message.Chat.ID, update.Message.Text)
						linkWait, delete = false, false
					} else {
						var groupPath string
						msg.DisableWebPagePreview = true

						msg.Text, groupPath, err = storage.GroupAdd(update.Message.Chat.ID, update.Message.Text) //1 –¥–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É
						if err != nil {
							break
						}

						log.Println("geting group members from vk api")
						users := GetGroupMembers(groupPath, int(update.Message.Chat.ID)) //2 —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º –µ—ë –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ–π

						log.Println("write users from vk api2DB")
						storage.UserAdd(users) //3 –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î

						linkWait = false
					}
				} else {
					switch update.Message.Text {
					case "/start":
						msg.ReplyMarkup = numericKeyboard
					case "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏":
						groupMode = true
						log.Println("group mode activated")
						groups := storage.GetAllGroups(update.Message.Chat.ID)
						msg.ReplyMarkup = keyBoardGenerator.NewKeyBoard(groups)
					case "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø":
						msg.DisableWebPagePreview = true
						msg.Text = storage.GetAllGroups(update.Message.Chat.ID)
					case "‚úÖ–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è":
						msg.Text = "–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É"
						linkWait = true
					case "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
						msg.ReplyMarkup = numericKeyboard
						groupMode = false
					case "‚ùå–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É":
						msg.Text = storage.DeleteGroupById(update.Message.Chat.ID, "https://vk.com/"+previusMessage)
						msg.Text = storage.DeleteUsersByGroupId(update.Message.Chat.ID, previusMessage)
						log.Printf("group name:", previusMessage)
						linkWait = true
						delete = true
						previusMessage = ""
					case "üÜï–°–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤—ã—Ö –ª—é–¥–µ–π":
						msg.DisableWebPagePreview = true
						usersFromDB := storage.GetAllUsers(update.Message.Chat.ID, previusMessage)
						usersFromVK := GetGroupMembers(previusMessage, int(update.Message.Chat.ID))

						var stBuilder strings.Builder

						for _, valueApi := range usersFromVK {

							var find bool

							for _, valueDB := range usersFromDB {

								if valueApi.VkId == valueDB.VkId {
									/* –°–¥–µ–ª–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑ –≤ –ë–∞–∑—É */
									find = true
									break
								}
							}

							if !find {
								log.Println("new user finded!")
								string := "https://vk.com/id" + strconv.Itoa(valueApi.VkId) + "\n"
								stBuilder.WriteString(string)
							}
						}
						if stBuilder.String() == "" {
							msg.Text = "–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç"
						} else {
							stBuilder.WriteString("‚¨ÜÔ∏è–Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏‚¨ÜÔ∏è")
							msg.Text = stBuilder.String()
						}
					case "‚ùì–ö–∞–∫ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?":
						msg.Text = "–ë–æ—Ç –º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–∞—Ö –≤–∫. (–ú–∞–∫—Å–∏–º—É–º 5 –≥—Ä—É–ø–ø)\n üëâ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
					default:
						msg.Text = "–ù–µ –∑–Ω–∞—é —Ç–∞–∫–∏—Ö –∫–æ–º–∞–Ω–¥, –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å /start"
					}
				}
			}

			if _, err := bot.Send(msg); err != nil {
				log.Printf("can't send message")
			}

		}
	}
}
